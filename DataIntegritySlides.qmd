---
title: "VC Data Integrity Slides"
author: "Dr. Greg M. Bernstein"
format: revealjs
---

# Introduction

## What's This about?

::: {.incremental}

* End to end credential development, issuance, verfification
* Use [VC Data Model 2.0](https://www.w3.org/TR/vc-data-model-2.0), [JSON-LD 1.1](https://www.w3.org/TR/json-ld11) for credential design
* Use [VC Data Integrity 1.0](https://www.w3.org/TR/vc-data-integrity) and Specific Cryptosuites to secure, issue and verify
* Use appropriate DIDs for development and deployment
* Somewhat from an applied cryptographic point of view (where are the keys!)

:::

## Beyond Test Vectors

* All VC DI crypto suites include test vectors
* [VC-DI-EdDSA 1.0](https://www.w3.org/TR/vc-di-eddsa) includes `eddsa-rdfc-2022` and `eddsa-jcs-2022` suites and has simple and enhanced test vectors as well as test vectors for proof sets and chains.
* [VC-DI-ECDSA 1.0](https://www.w3.org/TR/vc-di-ecdsa) includes `ecdsa-rdfc-2019`, `ecdsa-jcs-2019`, and `ecdsa-sd-2023` over curves P-256 and P-384 and test vectors.

## Beyond Sample Code and Sample Server

* [EdDSA/ECDSA Test Vectors](https://github.com/Wind4Greg/EdDSA-Test-Vectors) Code used to generate the test vectors (example secured credentials) in the [Data Integrity EdDSA Cryptosuites v1.0](https://w3c.github.io/vc-di-eddsa/) and [Data Integrity ECDSA Cryptosuites v1.0](https://w3c.github.io/vc-di-ecdsa/)
* [ECDSA-SD and BBS Test Vectors](https://github.com/Wind4Greg/ECDSA-SD-TestVectors) Code used to generate the test vectors (example secured credentials) in the [Data Integrity ECDSA selective disclosure](https://w3c.github.io/vc-di-ecdsa/) and [Data Integrity BBS Cryptosuites v1.0](https://w3c.github.io/vc-di-bbs/)
* [ECDSA-SD Library](https://github.com/Wind4Greg/ECDSA-SD-Library), [BBS for VC Library](https://github.com/Wind4Greg/BBS-VC-Library)
* [Server for Verifiable Credentials](https://github.com/Wind4Greg/Server-for-VCs) An example server for issuing and verifying *verifiable credential*. Used to participate in W3C interoperability tests.

## An Example Application of VCs

* Non-governmental
* Non-profit and as small as can be
* Small enough for student implementation

# Application: School or Community Club

## A 3rd Semester of Web Development?

::: {.incremental}

1. Basic front end and back end development [Introduction to full stack web development](https://www.grotto-networking.com/WebsiteDevelopment/WebDev.html)
2. More elaborate access control, security, and validation [Web Systems](https://www.grotto-networking.com/WebSystems/WebSystems.html), [Cybersecurity: An Overview](https://www.grotto-networking.com/CyberSecurity/CyberSec.html)
3. **Design verifiable credentials, issue and provide for their verification**

:::


## Cooperating School/Community Clubs Use Case

Suppose that we have two community hiking clubs (purely fictitious): *The Arcata Tall Trees Hiking Club* and the *White Mountain Old Trees Hiking Club* Both clubs exists to promote the "great outdoors", hiking safety, and comraderie.

::: {layout-ncol=2}

![The tallest trees (Coast Redwoods)](CoastRedwood.jpg){#fig-tall}

 ![The oldest trees (Bristlecone pine)](BristleconePine.jpg){#fig-old}

:::

## Clubs for Teaching Web Dev

* Students make up their own club to build over a semester. Example: [Bay Area Windsurf Foiling Club](https://bawfc.grotto-networking.com/index.html).

* To make the club interesting from a VC perspective the club should certify knowledge or skills of a member. Clubs can get quite elaborate with loaner equipment for members, events (open to all, open only to members, members paid, etc.), rating system, required volunteer work, etc.
* An example of a real club is the [Cal Sailing Club](https://www.cal-sailing.org/), a university club that morphed into a community club.

## Why Bother with Verifiable Credentials?

Hiking club example. Member status. Knowledge certification. Skills certification. Each club has separate member databases which for privacy reasons do not share with the other club. If only a single club then a "hike leader" could check the club database. Other mechanisms could include one club sending email to another or calling the other. These are not as timely as a current credential and sacrifice privacy. "Now we know that he/she is participating with that other club..."

# Designing the Club's VCs

## How Many Credential

Consider a wind sport club. It might offer activities in a number of disciplines: (a) dinghy sailing, (b) keel boat sailing, (c) windsurfing, (d) windsurf foiling, (e) wing foiling.

We could have a separate credential for each discipline. Some disciplines may overlap or feed into each other (windsurfing -> windsurf foiling).

## Wind Sport Club Categories

1. General Knowledge: Dock etiquet, Tides and Currents, Wind conditions, Boundaries for skill levels.
2. Sport and Equipment Specific Knowlege: how to assemble and attach a foil
3. Sport Specific Skills: tacking, jibing, getting on foil
4. Sport Specific Acheivements: round XYZ buoy and returning

## Things to Omit in a VC

Now there are also a number of things a club might need to know about you that do **not** need to be in a credential such as (a) phone number, (b) address, (c) emergency contact information, (d) student status, etc...

## Starting Credential VC Data Model 2.0

```{.javascript lst-cap="Annotated VC Data Model example."}
{
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "https://www.mysailclub.org/ns/credentials" // Our context will go here
  ],
  "id": "http://university.example/credentials/58473", // optional, id of the VC
  "name": "The name of this credential", // optional
  "description": "A description of the credential", // optional
  "type": ["VerifiableCredential", "WaterClubCredential"], // required
  "issuer": { // required, Specify the issuer nicely
    "id": "https://mysailclub.org", // club IRI (but also URL)
    "name": "My Wind Sports Club", // issuer name
    "description": "A public or school based wind sports club." // optional issuer desc
  },
  "validFrom": "2010-01-01T00:00:00Z", // optional
  "validUntil": "2020-01-01T19:23:24Z", // optional
  "credentialSubject": { // required
    "id": "did:example:ebfeb1f712ebc6f1c276e12ec21", // optional, id of the subject
    // Here is where all the custom stuff will go
  }
}
```

## Why JSON?

* [JSON](https://www.json.org/json-en.html): "JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate."
* JSON is the text based, data "lingua franca" for the web
* I would teach this early (week 4) in a first web programming class for CS majors. See [JSON Slides](https://www.grotto-networking.com/WebsiteDevelopment/files/lectures/Misc/JSON.html#/title-slide)

## Sport Specific Credential Example

```json
{
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "https://bawfc.grotto-networking.com/cred/foilcontext1"],
  "name": "Bay Area Windsurf Foiling Credential",
  "description": "Denotes membership, knowledge, and skills in windsurf foiling",
  "type": ["VerifiableCredential", "WindFoilCredential"],
  "issuer": {
    "id": "https://bawfc.grotto-networking.com",
    "name": "Bay Area Windsurf Foiling Club",
    "description": "Not a real club, but real information!"
  },
  "credentialSubject": {
    "type": ["Member", "WindsurfFoiler"],
    "membership": {"start": "2025-03-01T00:00:00Z", "end": "2025-10-31T00:00:00Z"},
    "knowledge": [
        {"topic": "DockEtiquette", "date": "1984-01-01T00:00:00Z"},
        {"topic": "TidesAndCurrents", "date": "2010-01-01T00:00:00Z"},
        {"topic": "WindPatterns", "date": "2010-01-01T00:00:00Z"},
        {"topic": "LandMarksBuoys","date": "2010-01-01T00:00:00Z"},
        {"topic": "BigBoatsFerries", "date": "2010-01-01T00:00:00Z"}],
    "skills": [
        {"skill": "Rigging", "date": "2010-01-01T00:00:00Z"},
        {"skill": "FoilSetup", "date": "2017-01-01T00:00:00Z"}],
    "distanceAchievements": [
        {"landmark": "TI", "date": "2010-01-01T00:00:00Z"},
        {"landmark": "R2", "date": "2011-01-01T00:00:00Z"}]
  }
}
```


## Credential Data Validation (*not* Verification)

JSON is great for modeling almost any data structure imaginable. However most applications only wants certain types of data in a particular format, i.e., a small subset of possible JSON structures and content. Typically the structure and type of data is specified by a ***schema*** of some kind.


## JSON-Schema 1

From [JSON-Schema](https://json-schema.org/)

* While JSON is probably the most popular format for exchanging data, JSON Schema is the vocabulary that enables JSON data consistency, validity, and interoperability at scale.
* JSON Schema is a declarative language for annotating and validating JSON documents' structure, constraints, and data types

## JSON-Schema 2

* In addition a JSON-Schema is specified via JSON!
* I Would teach this in a second web development course for use in data validation. [JSON-Schema Slides](https://www.grotto-networking.com/WebsiteDevelopment/files/lectures/Misc/JSON-Schema.html).
* I use JSON-Scheme in multiple places in my open source [VC interoperability test server](https://github.com/Wind4Greg/Server-for-VCs).

## JSON-Schema Example for a VC

```{.json lst-cap="Basic Schema to check a credential."}
{
     "$id": "https://grotto-networking.com/simple-credential.schema.json",
     "title": "UnsignedCredential",
     "description": "A basic credential validator, data model v1.1 or v2.0",
     "type": "object",
     "properties": {
          "@context": {
               "type": "array",
               "items": {"type": ["string", "object"]}
          },
          "id": {"type": "string", "format": "uri"},
          "type": {"type": ["string", "array"]},
          "credentialSubject": {"type": ["object", "array"]},
          "issuer": {
               "anyOf": [{"type": "string", "format": "uri"},
                    {"type": "object",
                      "properties": {
                              "id": {"type": "string", "format": "uri"}
                      },
                      "required": ["id"]}
               ]
          },
          "credentialStatus": {
               "type": "object",
               "properties": {
                    "id": {"type": "string", "format": "uri"},
                    "type": {"type": ["string", "array"]
                    }},
               "required": ["type"]
          }
     },
     "required": ["@context", "type", "credentialSubject", "issuer"]
}
```

## Using JSON-Schema 1

To actually perform checks of JSON document against a JSON-Schema, optimized code libraries are used. I use and would have my students use [npm: AJV](https://www.npmjs.com/package/ajv).

## Using JSON-Schema 2

![AJV NPM page](AJV-JSON-Schema.png)

## But What Does the Credential Mean 1?

What do the *date* fields mean in the credential? What do the *distanceAchievements* mean?

```{.json}
  "credentialSubject": {
    "type": ["Member", "WindsurfFoiler"],
    "membership": {"start": "2025-03-01T00:00:00Z", "end": "2025-10-31T00:00:00Z"},
    "knowledge": [
        {"topic": "DockEtiquette", "date": "1984-01-01T00:00:00Z"},
        {"topic": "TidesAndCurrents", "date": "2010-01-01T00:00:00Z"},
        {"topic": "WindPatterns", "date": "2010-01-01T00:00:00Z"},
        {"topic": "LandMarksBuoys","date": "2010-01-01T00:00:00Z"},
        {"topic": "BigBoatsFerries", "date": "2010-01-01T00:00:00Z"}],
    "skills": [
        {"skill": "Rigging", "date": "2010-01-01T00:00:00Z"},
        {"skill": "FoilSetup", "date": "2017-01-01T00:00:00Z"}],
    "distanceAchievements": [
        {"landmark": "TI", "date": "2010-01-01T00:00:00Z"},
        {"landmark": "R2", "date": "2011-01-01T00:00:00Z"}]
  }
  ```

## But What Does the Credential Mean 2? Distance

![Distances relative to Berkeley](SFBayWindsurf.jpg)

## Need to tell the *Context* of the Club

* Berkeley based club. Distances relative to Berkeley!
* What are those *landmark* abbreviations
* What do those different *date* sub-fields mean

## Use Global Term Definitions or Define Them

* Use terms from published vocabularies such as [Schema.org](https://schema.org/). Example: `https://schema.org/givenName` for *givenName*.
* ***Uniquely*** define your own terms such as: "https://bawfc.grotto-networking.com/cred#distanceAchievements" for the short term: *distanceAchievements*
* Assemble all the term definition into a JSON-LD `@context` document
* Given human readable information about each term you define in an accompanying vocabulary document.

## Example *publicKeyMultibase*

* We will use the term *publicKeyMultibase* in a JSON document to distribute out clubs public signing key. This is defined in the `@context`: [https://w3id.org/security/multikey/v1](https://w3id.org/security/multikey/v1)
* In the context JSON document the term *publicKeyMultibase* is given the unique id: [https://w3id.org/security#publicKeyMultibase](https://w3id.org/security#publicKeyMultibase)
* `https://w3id.org/security` resolves to the [Security Vocabulary](https://w3id.org/security) where you can actually read the definition of the term.

## Club Context

```{.json}
{
  "@context": {
    "protected": true,
    "Member": {
      "@id": "https://bawfc.grotto-networking.com/cred#Member",
      "@context": {
        "@protected": true,
        "membership": {
          "@id": "https://bawfc.grotto-networking.com/cred/#membership",
          "@context": {
            "@protected": true,
            "start": {
              "@id": "https://bawfc.grotto-networking.com/cred#start",
              "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
            },
            "end": {
              "@id": "https://bawfc.grotto-networking.com/cred#end",
              "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
            }
          }
        }
      }
    },
    "WindsurfFoiler": {
      "@id": "https://bawfc.grotto-networking.com/cred#WindsurfFoiler",
      "@context": [
        {
          "knowledge": {
            "@id": "https://bawfc.grotto-networking.com/cred#knowledge",
            "@container": "@set",
            "@context": {
              "@protected": true,
              "topic": "https://bawfc.grotto-networking.com/cred#topic",
              "date": {
                "@id": "https://bawfc.grotto-networking.com/cred#date",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
              }
            }
          }
        },
        {
          "skills": {
            "@id": "https://bawfc.grotto-networking.com/cred#skills",
            "@container": "@set",
            "@context": {
              "@protected": true,
              "skill": "https://bawfc.grotto-networking.com/cred#skill",
              "date": {
                "@id": "https://bawfc.grotto-networking.com/cred#date",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
              }
            }
          }
        },
        {
          "distanceAchiements": {
            "@id": "https://bawfc.grotto-networking.com/cred#distanceAchievements",
            "@container": "@set",
            "@context": {
              "@protected": true,
              "landmark": "https://bawfc.grotto-networking.com/cred#landmark",
              "date": {
                "@id": "https://bawfc.grotto-networking.com/cred#date",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
              }
            }
          }
        }
      ]
    }
  }
}
```

## This seems familiar...

* Sorry, students ***must*** design their own club credential from scratch, create a `context` document, and a `vocabulary` document!
* Others should look at reusing the [Open Badges Specification Spec Version 3.0](https://www.imsglobal.org/spec/ob/v3p0/) based on VC DM 2.0 emphasizes a single *achievement* (see [Open Badges Overview](https://www.1edtech.org/standards/open-badges)).
* Or the [Comprehensive Learner Record Standard Spec Version 2.0 ](https://www.imsglobal.org/spec/clr/v2p0) features a list of *achievements*, e.g. all the courses completed on the way to a academic degree.

## Deploy Context and Vocabulary

* Our context resolves to the JSON-LD from the link `https://bawfc.grotto-networking.com/cred/foilcontext1`
* Our vocabulary resolves from the link: `https://bawfc.grotto-networking.com/cred`
* Why spend time writing up a "good" vocabulary document? Other clubs would review this document to understand your credential and to decide whether to accept it for some purpose.

## Partial Vocabulary Markdown for Club

```{.markdown}
# WindsurfFoiler {#WindsurfFoiler}

This **type** information more specific to the discipline of windsurf foiling which can be considered a sub-discipline of windsurfing, which can be considered a sub-discipline of sailing.

## knowledge {#knowledge}

*knowledge* is a set of understandings about various *topics*.

### topic {#topic}

A *topic* is a single string identitying a particular area of knowledge. Currently defined topic strings include:

* **DockEtiquette**: Be polite and don't leave your gear on the dock for any longer than necessary. Know hazards of gear and equipment around other dock users.
* **TidesAndCurrents**: We don't like to run around or get stuck in the mud. Know the advantages and disadvantages of "flood" and "ebb" tides.
* **WindPatterns**: Know the common wind directions and patterns. Know what a "fade" is. Know what "banding" is and why its not a good thing. Never go out in easterlies!
* **LandMarksBuoys**: Know the common landmarks and buoys so you can communicate effectively with your fellow sailors.
* **BigBoatsFerries**: Let's stay alive people! Know the "big boat" traffic lanes in the bay. Know that they cannot stop (well yes, they can in a mile or two!). Know the fast ferry routes and why you always need to pay attention when crossing (yes, they are really fast).

### knowledgeDate {#knowledgeDate}

When was this knowledge *last* demonstrated, i.e., tested.
```

# Cryptosuites and Keys

## VC-DI Cryptosuites

* [Data Integrity EdDSA Cryptosuites v1.0](https://www.w3.org/TR/vc-di-eddsa) contains: "eddsa-jcs-2022", and "eddsa-rdfc-2022" cryptosuites.
* [Data Integrity ECDSA Cryptosuites v1.0](https://www.w3.org/TR/vc-di-ecdsa/) contains: "ecdsa-jcs-2019", "ecdsa-rdfc-2019", "ecdsa-sd-2023", cryptosuites for both P-256 and P-384 curves.
* [Data Integrity BBS Cryptosuites v1.0](https://www.w3.org/TR/vc-di-bbs/) contains: "bbs-2023" cryptosuite.

## NIST and Digital Signatures

* [FIPS PUB 186-5: Digital Signature Standard (DSS)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), February 2023.
  * Chapter 6: "The Elliptic Curve Digital Signature Algorithm (ECDSA)"
  * Chapter 7. "The Edwards-Curve Digital Signature Algorithm (EdDSA)"
* [NIST Special Publication NIST SP 800-186 Recommendations for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters](https://csrc.nist.gov/pubs/sp/800/186/final), February 2023. Defines the specific curves.

## How to Choose the Cryptosuite 1

* No other requirements: Choose EdDSA based signatures, more modern, faster, more rigorous foundation.
* Older hardware requirements: You may have to use ECDSA.
* Selective Disclosure: use either "bbs-2023" or "ecdsa-sd-2023"

## How to Choose the Cryptosuite 2

Canonicalization choice?

* Selective disclosure only works with RDFC so no choice if you want SD.
* For our club we developed a complete `@context` and RDFC takes full advantage of that.
* However JCS works fine with "regular" EdDSA and ECDSA
* For our club we choose "eddsa-rdfc-2022"

## Working with Keys

