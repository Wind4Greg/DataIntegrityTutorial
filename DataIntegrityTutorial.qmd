---
title: "VC Data Integrity Tutorial"
author: "Dr. Greg M. Bernstein and others?"
toc: true
number-sections: true
bibliography: DataIntegrity.bib
---

# Introduction

This document provides a tutorial introduction to W3C verifiable credentials to allow non-profit school or community clubs to cooperate with each in a timely and privacy enhancing way via the issuance and verification of *verifiable credentials*. We will illustrating the use of the following W3C **specifications**:

* Verifiable Credential Data Model 2.0 [@VC-DM2.0]
* Verifiable Credential Data Integrity 1.0 [@VC-DI1.0]
* JSON-LD-1.1 [@JSON-LD-1.1]

In addition we will go through the decision process in selecting the appropriate **cryptosuite** from among:

* Data Integrity EdDSA Cryptosuites v1.0 [@VC-DI-EdDSA]
* Data Integrity ECDSA Cryptosuites v1.0 [@VC-DI-ECDSA]

## Cooperating School/Community Clubs Use Case

Suppose that we have two community hiking clubs (purely fictitious): *The Arcata Tall Trees Hiking Club* and the *White Mountain Old Trees Hiking Club* as shown below. Both clubs exists to promote the "great outdoors", hiking safety, and comraderie.

![The tallest trees (Coast Redwoods)](CoastRedwoord.jpg) ![The oldest trees (Bristlecone pine)](BristleconePine.jpg)

When teaching begining and intermediate website development to computer science majors one of the authors of this tutorial would have students create a website for a real or fictional school or community club of their choosing, such as a hiking club, a guitar club, a cooking club etc... They would develop this website from a simple static HTML page to a full front-end/back-end server based application with logins for club members and club officers with different views and club management capabilities based on membership/officer status. A partially complete example club is the [Bay Area Windsurf Foiling Club](https://bawfc.grotto-networking.com/index.html). This tutorial goes one step further and adds the ability to issue verifiable credentials to its members so that they can participate in someway with a different club that has some kind of reciprocity agreement.

To make the club interesting from a credential perspective the club should certify knowledge or skills of a member. We assume the club has a website and member data base of some sort. Clubs can get quite elaborate with loaner equipment for members, events (open to all, open only to members, members paid, etc.), rating system, required volunteer work, etc. An example of such a club is the [Cal Sailing Club](https://www.cal-sailing.org/) a university club that morphed into a community club which has an extensive training program, collection of boats and windsurfers, and runs a number of events every year.

### Why Bother with Verifiable Credentials?

Hiking club example. Member status. Knowledge certification. Skills certification. Each club has separate member databases which for privacy reasons do not share with the other club. If only a single club then a "hike leader" could check the club database. Other mechanisms could include one club sending email to another or calling the other. These are not as timely as a current credential and sacrifice privacy. "Now we know that he/she is participating with that other club..."

# Club Credential Specification

## Club Specific Domain Knowledge

## JSON Everywhere!

**JSON**, **JSON Schema**, and **JSON-LD** What does each bring to the table and how much are they really used (alot!)

## Structure and Fields from the VC Data Model 2.0

## Additional Structure and Fields from Data Integrity 1.0

**Important** this also sets up the "proof options" that are used by the DI cryptosuites.

## Creating the Club Specific `@context`

# Signatures, Keys, and Cryptosuites, oh my!

## Choosing a Cryptosuite

Basic review of digital signatures, public key cryptography. Concerned with forgeries!

## Dealing with Cryptographic Keys

### Private keys

These need to be **protected**! There is a wide range of approaches...

### Public keys (DIDs)

This needs to be made available in a "secure maner", don't want a malicious party to substitute in their public key and *impersonate* the real issuer.

# Credential Issuance

# Credential Verification

# References