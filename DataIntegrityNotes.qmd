---
title: "VC Data Integrity Tutorial Notes"
author: "Dr. Greg M. Bernstein"
toc: true
number-sections: true
bibliography: DataIntegrity.bib
---


# Introduction Tutorial Approach

While there are lots of "big use-cases", e.g., drivers licenses, passports, etc., this presentation will look at a smaller and more enjoyable use case of a school or community club that can utilize digital credentials in a useful way. This puts us our application in the non-profit and non-governmental category.

* [Verifiable credential WG documents](https://www.w3.org/groups/wg/vc/publications/)
* [Credentials Community Group](https://www.w3.org/groups/cg/credentials/)

## TODOs and Ideas

* What kind of DID to use? For the club. Do we need one for the member? I don't think so.
* Other contexts that could be used "open badges", "CLR"... but we are rolling our own
* Choosing a cryptosuite. Decision tree.


## A School/Community Club

A school/community club with a website, loaner equipment for members, events (open to all, open only to members, members paid, etc.), rating system, dues, etc. An example of such a club is the [Cal Sailing Club](https://www.cal-sailing.org/) a university club that morphed into a community club. This *club* will be the [issuer](https://www.w3.org/TR/vc-data-model-2.0/#issuer) and the *member* will be the [credential subject](https://www.w3.org/TR/vc-data-model-2.0/#credential-subject). The *club* will also be the prime verifier.

Grants credentials... Verifies credentials. One big credential or multiple smaller credentials?

Locations where equipment may be borrowed may have limited connectivity. Also don't want to "phone home" or necessarily track members, except "who broke it" last use type of information... or "exessive use" information. But where credentials become particularly valuable is when different clubs in from different schools/communities wish some form of cooperation allowing members some type of reciprocal priveledges based on a verifiable credential.

Can we do better than an easily forgeable paper/plastic card? **Yes**

* Membership credential issuance
  * Prerequisites: Basic Member information, Emergency Contact, Liability wavers, Dues Paid
  * Membership credential issued. Dues payment may set the VC's *validFrom* and *validUntil* properties. See [Validity Period](https://www.w3.org/TR/vc-data-model-2.0/#validity-period)
* Competency Rating credential issuance
  * These may have a different validity period, may be honored by other affiliated clubs...
  * Dock etiquet
  * Equipment setup and take down
  * Water (tides and currents) and wind conditions knowledge
  * Wind based Skill Levels
  * Instructor Skill Levels
* Equipment checkout verification
  * Compentency certificate
  * Dues currently paid
  * Previously borrowed equipment returned

Can we show workflows? Issue an example credential into a wallet?

* Credential Specification
  * Developing the "context", standard and custom parts **Will Show**
  * A single big credential or multiple credentials?
* Credential Creation and Data Integrity **Will Show**
  * Credential creation without `proof`
  * Specification of DI "proof options"
  * Data Integrity: a general signature mechanism that works with **any** cryptographic signature scheme.
  * Signature cryptosuite selection **A slide or two**
  * This is initiated by a member and authorized by appropriate club "officers". This would be a club specific workflow which could utilize a call to the VC API to sign a credential.
* Credential Issuance
  * Key management: simple and what folks do in larger. What about the public key -> (DID)
  * Can we make our own website issue a credential into a wallet? *Issue here is wallets that work with VCs* I didn't see any simple VC wallets for Android. **Will not show**
  * What is this protocol stack? What wallets? [Info on CHAPI](https://vcplayground.org/docs/)
* Credential Verification
  * Resolving the public key of the issuer via a DID
  * In person verification when taking a competency exam
  * In person verification when checking out/returning equipment
  * Automated "locker" access for gear checkout/return

## Previous Presentations and Resources

* [Selective Disclosure for W3C Data Integrity](https://docs.google.com/presentation/d/1d-04kIWhPuNscsAyUuRH3pduqrNerhigCWahKe6SNos/edit?slide=id.g2174b6c9183_0_1364#slide=id.g2174b6c9183_0_1364)
* [W3C VCWG VC Data Integrity](https://docs.google.com/presentation/d/1a2T1gEuJvgPXsuWaniM8k4jJtu0nbsqsxRGpYrjKzJs/edit?pli=1&slide=id.p#slide=id.p) TPAC 2023.
* [JSON for Linking Data](https://json-ld.org/)
* [VC Playground](https://vcplayground.org/)


# Club Credential Specification

See file `/home/greg/Greg_Work/SecurityPrivacy/JSONLD-Test/FoilingCreds.md` for content ideas.

VC Data Model 2.0 [@VC-DM2.0] -- "This specification uses JSON-LD 1.1 to serialize the data model",


Choices: *embedded proof* (Data Integrity 1.0) or *enveloping proof*

, JSON and JSON-LD, Contexts

**Question**: How best to organize the credentials for the club? Assuming a multi-sport wind sport club, e.g., sailing, windsurfing, windsurf foiling, wing foiling. Should we have one credential with lots of properties, or lots of separate credentials, or something in between, e.g., membership credential and sport specific credentials?

1. Membership: are their dues currently paid. Natural expiration date, covered by dues period. This would tend to be a much shorter period of time than for knowledge or skill expiration.
2. Knowledge competency (written):
   1. General Knowledge: Dock etiquet, Tides and Currents, Wind conditions, Boundaries for skill levels. Note: dock etiquet (shared use of docks) can change if some docks are out of service. Youth classes are being held, etc... The others would tend not to change much over time.
   2. Sport and Equipment Specific Knowlege (Beginner, Intermediate, and Advanced)
      1. Sailing: Hoist usage, rigging of specific boat types.
      2. Windsurfing: equipment familiarity (terminology), board set up. Rigging
      3. Windsurf foiling: equipment familiarity, foil setup, rigging
      4. Wing foiling: equipment familiarity, foil setup, wing setup and care.
   3. Sport Specific Skills
      1. Dinghy sailing: Junior Skipper (Docking, tacking, jibing, man-over-board, capsize and recovery)
      2. Windsurfing: Beginner (board paddling to return to dock), Junior: Sail in 10mph or less wind around buoy X in cove and return to dock; Intermediate: sail in 10-15mph wind around buoy Y and return; Advanced: Sail in 15-25mph wind around buoy Z and return.
      3. Windsurf foiling: must be *advanced* windsurfer. Intermediate sustained foiling for 30 seconds or more. Advanced: demonstrate successful foiling jibe.
      4. Wing foiling: etc...

## JSON Everywhere

My Notes: When teaching "web developement" to CS majors there is so much material to be covered need to reduce the cognitive load. I would choose to use JavaScript on the server since students would need to learn JavaScript for the browser. JavaScript contains an easy to use subset that can be used to express nearly arbitrary data structures. This is JSON.

* [JSON](https://www.json.org/json-en.html) Simple, easy, data interoperability, across many languages. Data "lingua franca" for the web. I would teach this early (week 4) on in a first web dev class for CS majors [JSON Slides](https://www.grotto-networking.com/WebsiteDevelopment/files/lectures/Misc/JSON.html#/title-slide).
* [JSON-Schema](https://json-schema.org/) "JSON Schema is a declarative language for annotating and validating JSON documents' structure, constraints, and data types." Would teach this in a second web development course for use in data validation. [JSON-Schema Slides](https://www.grotto-networking.com/WebsiteDevelopment/files/lectures/Misc/JSON-Schema.html)  Would have my students use [npm: AJV](https://www.npmjs.com/package/ajv). I use AJV for initial credential validation in my [VC interoperability test server](https://github.com/Wind4Greg/Server-for-VCs)
* [RFC6901 JavaScript Object Notation (JSON) Pointer](https://www.rfc-editor.org/rfc/rfc6901),April 2013, "JSON Pointer defines a string syntax for identifying a specific value within a JavaScript Object Notation (JSON) document.", Only 8 pages.
* [RFC 8785 JSON Canonicalization Scheme (JCS)](https://www.rfc-editor.org/rfc/rfc8785), June 2020. "Cryptographic operations like hashing and signing need the data to be expressed in an invariant format so that the operations are reliably repeatable. One way to address this is to create a canonical representation of the data."

Example: Popularity of JSON-Schema and AJV

![AJV at NPM](AJV-JSON-Schema.png)

## JSON-LD (What Does it Add?)

JSON-LD 1.1 [@JSON-LD-1.1] Abstract: "JSON is a useful data serialization and messaging format. This specification defines JSON-LD 1.1, a JSON-based format to serialize Linked Data. The syntax is designed to easily integrate into deployed systems that already use JSON, and provides a smooth upgrade path from JSON to JSON-LD. It is primarily intended to be a way to use Linked Data in Web-based programming environments, to build interoperable Web services, and to store Linked Data in JSON-based storage engines."

"In addition to all the features JSON provides, JSON-LD introduces:"

* a universal identifier mechanism for JSON objects via the use of IRIs,
* a way to disambiguate keys shared among different JSON documents by mapping them to IRIs via a **context**,
* a mechanism in which a value in a JSON object may refer to a resource on a different site on the Web,
* the ability to annotate strings with their language,
* a way to associate datatypes with values such as dates and times,
* and a facility to express one or more directed graphs, such as a social network, in a single document.

**Question**: Which of these are used in VCs? How are these different from JSON-Schema capabilities?

RDF Canonicalization [@RDF-Canon]

**Abstract**:  "RDF [RDF11-CONCEPTS] describes a graph-based data model for making claims about the world and provides the foundation for reasoning upon that graph of information. At times, it becomes necessary to compare the differences between sets of graphs, digitally sign them, or generate short identifiers for graphs via hashing algorithms. This document outlines an algorithm for normalizing RDF datasets such that these operations can be performed."

**Why?** Selective Disclosure!!! Want an ordered set of statements that can be selectively revealed. Need the additional algorithms from selective disclosure portion of ECDSA-SD spec.

## Basic VC Data Model 2.0 VC

The minimal example from VC DM 2.0:

```json
{
  "@context": [
    "https://www.w3.org/ns/credentials/v2", // Includes DataIntegrityProof
    "https://www.w3.org/ns/credentials/examples/v2"
  ],
  "type": ["VerifiableCredential", "MyPrototypeCredential"],
  "credentialSubject": {
    "mySubjectProperty": "mySubjectValue"
  }
}
```

Useful additional fields from VC DM 2.0:

```javascript
{
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    "https://www.mysailclub.org/ns/credentials" // Our context here
  ],
  "id": "http://university.example/credentials/58473", // id of the VC
  "name": "The name of this credential",
  "description": "A description of the credential",
  "type": ["VerifiableCredential", "WaterClubCredential"],
  "issuer": { // Specify the issuer nicely
    "id": "https://mysailclub.org", // club IRI (but also URL)
    "name": "My Wind Sports Club", // issuer name
    "description": "A public or school based wind sports club." // issuer desc
  },
  "validFrom": "2010-01-01T00:00:00Z",
  "validUntil": "2020-01-01T19:23:24Z",
  "credentialSubject": {
    "id": "did:example:ebfeb1f712ebc6f1c276e12ec21", // id of the subject
    // Here is where all the custom stuff will go
  }
}
```

### Data Integrity 1.0 *proof*

A summary of the ***proof*** field from data integrity 1.0 document is given below. The *proof* field object without the *proofValue* entry is used as the "proof options" is used as the input to many of the cryptosuites.

```javascript
{
  // required fields
  "type": "DataIntegrityProof", // Only. We are using the DI 1.0 spec
  "proofPurpose": "assertionMethod", // Use this value for VCs
  "cryptosuite": "One of official cryptosuite names", // We will discuss how to pick
  "verificationMethod": "points to issuer public key, either did:key or ",
  "proofValue": "Cryptographic value computed by the cryptosuite",
  // optional fields
  "created": "", // applies to proof not credential
  "expires": "", // applies to proof
  "id": "", // id of the proof
  "domain": "we will not use",
  "challenge": "we will not use",
  "previousProof": "we will not use", // for proof sets or chains
  "nonce": "we will not use"
}

```

For the *verificationMethod* we use a DID to map to the issuers public key. There are many "DID methods" from the point of view of our club which is has a web site implementation we will consider using "did:key", "did:web", and "did:webvh".

* [DID Methods: Known DID Methods in the Decentralized Identifier Ecosystem](https://www.w3.org/TR/did-extensions-methods/)
* [The did:key Method v0.7](https://w3c-ccg.github.io/did-key-spec/) Use for development easy to pass around the public key for the cryptosuite.
* [did:web Method Specification](https://w3c-ccg.github.io/did-method-web/) Use for deployment since club already has a website.
* [The did:webvh DID Method v1.0](https://identity.foundation/didwebvh/v1.0/) More features than "did:web" can use for deployment since club already has a website.
* Current possible values for the *cryptosuite* field: "ecdsa-sd-2023", "bbs-2023", "ecdsa-jcs-2019", "ecdsa-rdfc-2019", "eddsa-jcs-2022", and "eddsa-rdfc-2022".


## Context Creation

Example from ECDSA-SD test vectors:

```javascript
// context for "https://windsurf.grotto-networking/selective#"

export const windSDexamples = {
  '@context': {
    '@protected': true,
    year: 'https://windsurf.grotto-networking/selective#year',
    boardName: 'https://windsurf.grotto-networking/selective#boardName',
    sailName: 'https://windsurf.grotto-networking/selective#sailName',
    size: 'https://windsurf.grotto-networking/selective#size',
    brand: 'https://windsurf.grotto-networking/selective#brand',
    boards: 'https://windsurf.grotto-networking/selective#boards',
    sails: 'https://windsurf.grotto-networking/selective#sails',
    sailNumber: 'https://windsurf.grotto-networking/selective#sailNumber'
  }
}
```

The credentials for our club will be broken down into three groups:

* member status (dues paid, etc...), [alumni example](https://www.w3.org/TR/vc-data-model-2.0/#example-use-of-the-context-property)
* knowledge certifications: a set of specific knowledge demonstrated
* skill certifications: a set of specific skills demonstrated

Complete specifications in the education area: [Open Badges Overview](https://www.1edtech.org/standards/open-badges), [Open Badges Specification Spec Version 3.0](https://www.imsglobal.org/spec/ob/v3p0/)-- based on VC DM 2.0 --  and [Comprehensive Learner Record Standard Spec Version 2.0 ](https://www.imsglobal.org/spec/clr/v2p0) this features a list of "achievements".

Note that the CLR 2.0 *context* uses `"@container": "@set"` for its `achievement` field, i.e., multiple "achievements" while in Open Badges 3.0 you get one acheivement.

Notes from Dave L:

it looks like what you want / don't know about is type-scoped contexts

one reason to use types is that you can scope all of your properties underneath that "type" of thing ... so they only become operative when that type is present -- which also allows the same JSON names to be used on different types and have those properties map to different things, for example:

{
  "type": "Animal",
  "legs": 4
}

vs.

{
  "type": "Table",
  "legs": 4
}

but who knows, maybe "legs" should map to the same global URL there :stuck_out_tongue: ... anyway, a matter for the vocabulary experts in the space.

so, to give an example of type-scoped contexts, i think we can grab the VC 2.0 context ... one moment ...
yeah, so in this guy: https://www.w3.org/ns/credentials/v2 ... here's a snippet:

```json
    "VerifiableCredential": {
      "@id": "https://www.w3.org/2018/credentials#VerifiableCredential",
      "@context": {
        "@protected": true,

        "id": "@id",
        "type": "@type",

        "confidenceMethod": {
          "@id": "https://www.w3.org/2018/credentials#confidenceMethod",
          "@type": "@id"
        },
        "credentialSchema": {
          "@id": "https://www.w3.org/2018/credentials#credentialSchema",
          "@type": "@id"
        },
        "credentialStatus": {
          "@id": "https://www.w3.org/2018/credentials#credentialStatus",
          "@type": "@id"
        },
        "credentialSubject": {
          "@id": "https://www.w3.org/2018/credentials#credentialSubject",
          "@type": "@id"
        },
        ...
      }
    }
    ...
  }
}
```

that defines the properties "confidenceMethod", "credentialSchema", "credentialSubject", etc. ... but ONLY on objects of type "VerifiableCredential".
(hopefully all of those things sound familiar to you from working with VCs as well)

so you can rework your context like this:

```json
{
  "@context": [
    "https://www.w3.org/ns/credentials/v2",
    {
      "Member": {
        "@id": "https://bawfc.grotto-networking.com/cred/#Member",
        "@context": {
          "membership": "https://bawfc.grotto-networking.com/cred/#membership"
        }
      },
      "WindsurfFoiler": {
        "@id": "https://bawfc.grotto-networking.com/cred/#WindsurfFoiler",
        "@context": {
          "knowledge": "https://bawfc.grotto-networking.com/cred/#knowledge",
          "skills":"https://bawfc.grotto-networking.com/cred/#skills",
          "distanceAchiements": "https://bawfc.grotto-networking.com/cred/#distanceAchiements",
        }
      },
      "start": {"@id": "https://bawfc.grotto-networking.com/cred/#start",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"},
      "end": {"@id": "https://bawfc.grotto-networking.com/cred/#end",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"},
      "topic": "https://bawfc.grotto-networking.com/cred/#topic",
      "date": {"@id": "https://bawfc.grotto-networking.com/cred/#date",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"},
      "skill": "https://bawfc.grotto-networking.com/cred/#skill",
      "landmark": "https://bawfc.grotto-networking.com/cred/#landmark"
    }
  ]
  ...
}
```

so you can see the "Member" and "WindsurfFoiler" get their own "sub contexts" ... which only become active when the type is present on the object in the data model.

there are other things i'd also recommend here, like using @protected both in your top-level context and in any scoped contexts, just like the VC 2.0 context does (see above); @protected prevents people from changing the term definitions in the data itself in unsafe ways (and this is mentioned in the VC 2.0 spec)

you can also use property-scoped contexts, if you'd like ...
which allows you to specify a "sub context" that only becomes active underneath a particular property in the JSON, i.e., in one "nested branch" of the JSON...

so, you could, if you felt it necessary to help avoid global conflicts (probably unnecessary here), move the "skill" and "landmark" stuff up into the "skills" property definition above in a sub context there
if you were designing a larger vocabulary for reuse in many use cases, this is a good idea.
same with redeclaring @id and @type inside scoped contexts ... which you'll see in the VC 2.0 context ... these sorts of things are good hygiene for "large use cases" or larger vocabs that might be reused to mix and match in interesting ways

i don't think all that's really needed here for a windsurfing club -- but good to know.

the other thing that is usually recommended is: reuse existing vocabulary terms from existing popular vocabs, i.e., just like one does not invent new words -- they just reuse the ones from the dictionary, it's good to reuse big popular vocabs if you can (like schema.org) ... of course, i understand that you're intentionally putting together your own vocab here...
9:13
but it's worth noting that even when designing your own context or a new vocabulary to use in it, it's good to do as much reuse as you can with the existing ecosystem

anyway, hopefully these tips help ... one problem i experience myself with recommending tools (other than the playground and the specs) is that i was involved in all the work ...

note there were a few typos i noticed in that context as well as i edited it (distanceAchiements (missing v) in two places ... and a number of the terms went to the same URL instead of different ones)

like this:
"date": {"@id": "https://bawfc.grotto-networking.com/cred/#skills",
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"},

you can see that maps "date" to "...#skills"! (edited)
so that's going to burn you in the playground too if you're messing around with expansion and compaction ... stuff will get all kinds of wonky as it programmatically maps stuff to things you weren't expecting due to the typos (it will do what you tell it to! :stuck_out_tongue: )
that's the kind of thing that either ... "AI" or some clever highlighting/algorithms might help people notice

having two terms that map to the same URL is an actual "use case", even if it's usually a "mistake"/"typo" ... so hard to help people in the right ways sometimes.
the processor is only going to run when you run compaction or expansion (or another JSON-LD API function)
and it will check basic JSON-LD syntax ... and basic structures if you ask for them like "set" manipulation as you mentioned but it's not JSON schema -- and that's important.

just because you declare that you prefer something to be expressed as a set when you run "compact" doesn't mean it isn't legal JSON-LD to express it as a non-set.
so it's really important to remember that JSON-LD is about expressing meaning ... and not about restricting structure (this is what JSON schema is for).
what you want to make sure you do with JSON-LD is express how everything that appears in your document ought to be understood on a global scale ... once you've taken into consideration where and how it appears in the document.
that doesn't meant that you MUST express it this way or that way (JSON schema) -- but rather when you DO express it this way it means THIS
so you can use JSON-LD and JSON schema together to get really tight data if you want it.
some people want really tight data (quite often you do with VCs, but not necessarily always) and some people do not, especially when they only work with the data on a graph level ... and they don't expect everyone to have to express everything the same way.
(powerful decentralized properties)

so there's a lot of power in the expressivity here ... but that's not great when trying to teach beginners how to do things or trying to teach "good basic best practices for simple use cases" ... which is what is really lacking in the VC ecosystem.

it's good that we've been able to get a good base and powerful foundation to build just about anything in the decentralized world here ... but now we need some good layers added on top to guide people who don't want to build everything from that layer up!
hence, OpenBadges, and other efforts like that that make opinionated choices on top of the base layers.



# Club Credential Workflow

## Credential Creation

# Club Credential Issuance

## Keys and Key Management

Some references/articles:

* [OWASP: Secrets Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html) Comprehensive. See, for example section "3.2 Where should a secret be?".
* [OWASP: Key Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html)
* [Implementing CCM: Cryptography, Encryption, and Key Management](https://cloudsecurityalliance.org/blog/2025/03/10/implementing-ccm-cryptography-encryption-and-key-management) from the Cloud Security Alliance. Also [Cloud Key Management](https://cloudsecurityalliance.org/research/topics/cloud-key-management)
* Hardware and Software Security
  * [Hardware Security: Understanding the Differences Between a Secure Element, TPM, HSM, and a TEE](https://tropicsquare.com/blogs/hardware-security-understanding-the-differences-between-a-secure-element-tpm-hsm-and-a-tee), [TPMs, TEEs, and Everything In Between: What You Actually Need to Know](https://unmitigatedrisk.com/?p=991), [What Is the Difference Between HSM, TPM, Secure Enclave, and Secure Element or Hardware Root of Trust](https://www.wolfssl.com/difference-hsm-tpm-secure-enclave-secure-element-hardware-root-trust/)
  * [Wikipedia: Trusted Execution Environment](https://en.wikipedia.org/wiki/Trusted_execution_environment)
  * [Wikipedia: Trusted Platform Module](https://en.wikipedia.org/wiki/Trusted_Platform_Module), Also see [GitHub: wolfTPM](https://github.com/wolfSSL/wolfTPM)
  * [Wikipedia: Secure Element](https://en.wikipedia.org/wiki/Secure_element), [Kapersky SE](https://encyclopedia.kaspersky.com/glossary/secure-element/),
* [What is AWS CloudHSM?](https://docs.aws.amazon.com/cloudhsm/latest/userguide/introduction.html) "AWS CloudHSM combines the benefits of the AWS cloud with the security of hardware security modules (HSMs). A hardware security module (HSM) is a computing device that processes cryptographic operations and provides secure storage for cryptographic keys."
* [Example commercial clould level HSM](https://cpl.thalesgroup.com/encryption/hardware-security-modules), or something different [Not your traditional HSM](https://www.yubico.com/products/hardware-security-module/) Using a tiny USB dongle as HSM to protect keys.
* [Using an External Secret Management Service](https://www.digitalocean.com/community/tutorials/an-introduction-to-managing-secrets-safely-with-version-control-systems#using-an-external-secret-management-service) Mentions: [HashiCorp’s Vault](https://developer.hashicorp.com/vault), Square’s [Keywhiz](https://square.github.io/keywhiz/), and [Pinterest’s Knox](https://github.com/pinterest/knox).
* [How To Securely Manage Secrets with HashiCorp Vault on Ubuntu 20.04](https://www.digitalocean.com/community/tutorials/how-to-securely-manage-secrets-with-hashicorp-vault-on-ubuntu-20-04)

## Signing Credentials via Data Integrity

**Which cryptosuite and why?**

## Some nginx configurations

Added the following to the `/etc/nginx/mime.types` file

```{.text}
application/ld+json       		  jsonld;
```

Added redirects for the context and vocabulary files via nginx rewrite directives in the `/etc/nginx/sites-available/bawfc.grotto-networking.com` file:

```{.text}
server {

        root /var/www/bawfc.grotto-networking.net/html;
        index index.html index.htm index.nginx-debian.html;

        server_name bawfc.grotto-networking.com;
        rewrite ^/cred/foilcontext1$ /cred/windFoilContextV3.jsonld permanent ;
        rewrite ^/cred/vocab$ /cred/Vocabulary.html permanent ;

	access_log /var/log/nginx/bawfc.access.log;
	error_log /var/log/nginx/bawfc.error.log;

        location / {
                try_files $uri $uri/ =404;
        }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/bawfc.grotto-networking.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/bawfc.grotto-networking.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = bawfc.grotto-networking.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        listen 80;
        listen [::]:80;

        server_name bawfc.grotto-networking.com;
    return 404; # managed by Certbot


}
```

## Transfer to Holder via CHAPI

### Wallets and Such

Although there are tons of crypto wallets out there, there doesn't seem to be many general purpose wallets for credentials. Most have virtually no documentation about what standards they implement for transfer or credential format. A few with some info are listed below.

* [Veres Wallet](https://demo.vereswallet.dev/) "Stores any credential that can be stored in a physical wallet. Cloud-based digital wallet that cannot be lost or stolen. Access your credentials from all of your devices"
* [Learner Credential Wallet](https://play.google.com/store/apps/details?id=app.lcw) "Learner Credential Wallet is a cross-platform mobile application for storing and sharing digital learner credentials as specified in the learner credential wallet specification developed by the Digital Credentials Consortium. The learner credential wallet specification is based on the draft W3C Universal Wallet interoperability specification and the draft W3C Verifiable Credentials data model."
* [CA DMV Wallet](https://play.google.com/store/apps/details?id=gov.ca.dmv.wallet) Specific to CA DMV.

Specifications and such:

* [CCG: Universal Wallet 2020](https://w3c-ccg.github.io/universal-wallet-interop-spec/) "This specification describes a portable, extensible, JSON-LD wallet representation, supporting digital currencies and credentials." Last updated 2023.
* [OpenWallet Foundation](https://openwallet.foundation/)

# Verification for Events and Equipment Checkout



# References